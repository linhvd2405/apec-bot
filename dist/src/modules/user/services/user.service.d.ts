import { ConfigService } from '@nestjs/config';
import { HelperStringService } from 'src/common/helper/services/helper.string.service';
import { IUserService } from 'src/modules/user/interfaces/user.service.interface';
import { UserRepository } from 'src/modules/user/repositories/user.repository';
import { IDatabaseCreateOptions, IDatabaseSoftDeleteOptions, IDatabaseExistOptions, IDatabaseFindAllOptions, IDatabaseFindOneOptions, IDatabaseOptions } from 'src/common/database/interfaces/database.interface';
import { IUserCheckExist, IUserCreate, IUserDocument } from 'src/modules/user/interfaces/user.interface';
import { UserDocument } from 'src/modules/user/schemas/user.schema';
import { UserUpdateDto } from 'src/modules/user/dtos/user.update.dto';
import { IAuthPassword } from 'src/common/auth/interfaces/auth.interface';
import { UserPayloadSerialization } from 'src/modules/user/serializations/user.payload.serialization';
import { AwsS3Serialization } from 'src/common/aws/serializations/aws.s3.serialization';
export declare class UserService implements IUserService {
    private readonly userRepository;
    private readonly helperStringService;
    private readonly configService;
    private readonly uploadPath;
    constructor(userRepository: UserRepository, helperStringService: HelperStringService, configService: ConfigService);
    findAll<T>(find?: Record<string, any>, options?: IDatabaseFindAllOptions): Promise<T[]>;
    findOneById<T>(_id: string, options?: IDatabaseFindOneOptions): Promise<T>;
    findOne<T>(find: Record<string, any>, options?: IDatabaseFindOneOptions): Promise<T>;
    getTotal(find?: Record<string, any>, options?: IDatabaseOptions): Promise<number>;
    create({ firstName, lastName, password, passwordExpired, salt, email, mobileNumber, role, }: IUserCreate, options?: IDatabaseCreateOptions): Promise<UserDocument>;
    deleteOneById(_id: string, options?: IDatabaseSoftDeleteOptions): Promise<UserDocument>;
    deleteOne(find: Record<string, any>, options?: IDatabaseSoftDeleteOptions): Promise<UserDocument>;
    updateOneById(_id: string, data: UserUpdateDto, options?: IDatabaseOptions): Promise<UserDocument>;
    checkExist(email: string, mobileNumber: string, options?: IDatabaseExistOptions): Promise<IUserCheckExist>;
    updatePhoto(_id: string, aws: AwsS3Serialization, options?: IDatabaseOptions): Promise<UserDocument>;
    createRandomFilename(): Promise<Record<string, any>>;
    updatePassword(_id: string, { salt, passwordHash, passwordExpired }: IAuthPassword, options?: IDatabaseOptions): Promise<UserDocument>;
    updatePasswordExpired(_id: string, passwordExpired: Date, options?: IDatabaseOptions): Promise<UserDocument>;
    inactive(_id: string, options?: IDatabaseOptions): Promise<UserDocument>;
    active(_id: string, options?: IDatabaseOptions): Promise<UserDocument>;
    payloadSerialization(data: IUserDocument): Promise<UserPayloadSerialization>;
}
